from __future__ import annotations
import sys
from importlib.machinery import ModuleSpec, PathFinder
from importlib.machinery import all_suffixes as module_suffixes
from importlib.util import spec_from_file_location
from itertools import chain
from pathlib import Path

MAPPING: dict[str, str] = {'configs': '/home/turnwald/git/mpc-lab/configs', 'examples': '/home/turnwald/git/mpc-lab/examples', 'mpc_lab': '/home/turnwald/git/mpc-lab/mpc_lab', 'scripts': '/home/turnwald/git/mpc-lab/scripts', 'tests': '/home/turnwald/git/mpc-lab/tests'}
NAMESPACES: dict[str, list[str]] = {'tests': ['/home/turnwald/git/mpc-lab/tests'], 'examples': ['/home/turnwald/git/mpc-lab/examples'], 'scripts': ['/home/turnwald/git/mpc-lab/scripts'], 'configs': ['/home/turnwald/git/mpc-lab/configs'], 'mpc_lab.experiments': ['/home/turnwald/git/mpc-lab/mpc_lab/experiments'], 'mpc_lab.modeling': ['/home/turnwald/git/mpc-lab/mpc_lab/modeling'], 'mpc_lab.utils': ['/home/turnwald/git/mpc-lab/mpc_lab/utils'], 'mpc_lab.controllers': ['/home/turnwald/git/mpc-lab/mpc_lab/controllers'], 'mpc_lab.integration': ['/home/turnwald/git/mpc-lab/mpc_lab/integration'], 'mpc_lab.viz': ['/home/turnwald/git/mpc-lab/mpc_lab/viz'], 'mpc_lab.sim': ['/home/turnwald/git/mpc-lab/mpc_lab/sim'], 'mpc_lab.koopman': ['/home/turnwald/git/mpc-lab/mpc_lab/koopman'], 'mpc_lab.data': ['/home/turnwald/git/mpc-lab/mpc_lab/data'], 'mpc_lab.transcription': ['/home/turnwald/git/mpc-lab/mpc_lab/transcription'], 'mpc_lab.constants': ['/home/turnwald/git/mpc-lab/mpc_lab/constants'], 'mpc_lab.solvers': ['/home/turnwald/git/mpc-lab/mpc_lab/solvers'], 'mpc_lab.core': ['/home/turnwald/git/mpc-lab/mpc_lab/core'], 'mpc_lab.safety': ['/home/turnwald/git/mpc-lab/mpc_lab/safety'], 'mpc_lab.experiments.attitude': ['/home/turnwald/git/mpc-lab/mpc_lab/experiments/attitude'], 'mpc_lab.experiments.diffdrive': ['/home/turnwald/git/mpc-lab/mpc_lab/experiments/diffdrive'], 'mpc_lab.modeling.dynamics': ['/home/turnwald/git/mpc-lab/mpc_lab/modeling/dynamics'], 'mpc_lab.modeling.costs': ['/home/turnwald/git/mpc-lab/mpc_lab/modeling/costs'], 'mpc_lab.modeling.constraints': ['/home/turnwald/git/mpc-lab/mpc_lab/modeling/constraints'], 'mpc_lab.integration.ros2': ['/home/turnwald/git/mpc-lab/mpc_lab/integration/ros2'], 'mpc_lab.integration.basilisk': ['/home/turnwald/git/mpc-lab/mpc_lab/integration/basilisk'], 'configs.model': ['/home/turnwald/git/mpc-lab/configs/model'], 'configs.sim': ['/home/turnwald/git/mpc-lab/configs/sim'], 'configs.solver': ['/home/turnwald/git/mpc-lab/configs/solver'], 'configs.controller': ['/home/turnwald/git/mpc-lab/configs/controller'], 'configs.safety': ['/home/turnwald/git/mpc-lab/configs/safety']}
PATH_PLACEHOLDER = '__editable__.mpc_lab-0.1.0.finder' + ".__path_hook__"


class _EditableFinder:  # MetaPathFinder
    @classmethod
    def find_spec(cls, fullname: str, path=None, target=None) -> ModuleSpec | None:  # type: ignore
        # Top-level packages and modules (we know these exist in the FS)
        if fullname in MAPPING:
            pkg_path = MAPPING[fullname]
            return cls._find_spec(fullname, Path(pkg_path))

        # Handle immediate children modules (required for namespaces to work)
        # To avoid problems with case sensitivity in the file system we delegate
        # to the importlib.machinery implementation.
        parent, _, child = fullname.rpartition(".")
        if parent and parent in MAPPING:
            return PathFinder.find_spec(fullname, path=[MAPPING[parent]])

        # Other levels of nesting should be handled automatically by importlib
        # using the parent path.
        return None

    @classmethod
    def _find_spec(cls, fullname: str, candidate_path: Path) -> ModuleSpec | None:
        init = candidate_path / "__init__.py"
        candidates = (candidate_path.with_suffix(x) for x in module_suffixes())
        for candidate in chain([init], candidates):
            if candidate.exists():
                return spec_from_file_location(fullname, candidate)
        return None


class _EditableNamespaceFinder:  # PathEntryFinder
    @classmethod
    def _path_hook(cls, path) -> type[_EditableNamespaceFinder]:
        if path == PATH_PLACEHOLDER:
            return cls
        raise ImportError

    @classmethod
    def _paths(cls, fullname: str) -> list[str]:
        paths = NAMESPACES[fullname]
        if not paths and fullname in MAPPING:
            paths = [MAPPING[fullname]]
        # Always add placeholder, for 2 reasons:
        # 1. __path__ cannot be empty for the spec to be considered namespace.
        # 2. In the case of nested namespaces, we need to force
        #    import machinery to query _EditableNamespaceFinder again.
        return [*paths, PATH_PLACEHOLDER]

    @classmethod
    def find_spec(cls, fullname: str, target=None) -> ModuleSpec | None:  # type: ignore
        if fullname in NAMESPACES:
            spec = ModuleSpec(fullname, None, is_package=True)
            spec.submodule_search_locations = cls._paths(fullname)
            return spec
        return None

    @classmethod
    def find_module(cls, _fullname) -> None:
        return None


def install():
    if not any(finder == _EditableFinder for finder in sys.meta_path):
        sys.meta_path.append(_EditableFinder)

    if not NAMESPACES:
        return

    if not any(hook == _EditableNamespaceFinder._path_hook for hook in sys.path_hooks):
        # PathEntryFinder is needed to create NamespaceSpec without private APIS
        sys.path_hooks.append(_EditableNamespaceFinder._path_hook)
    if PATH_PLACEHOLDER not in sys.path:
        sys.path.append(PATH_PLACEHOLDER)  # Used just to trigger the path hook
